#include <stdio.h>
#include <stdlib.h>
#include <assert.h>

#include <cuda_runtime.h>
#include <cusparse_v2.h>
#include <cusolverSp.h>

#include "Utilities.cuh"

/********/
/* MAIN */
/********/
int main()
{
  cusparseHandle_t handle; cusparseCreate(&handle);
  // define the CSR matrix
  int nRow = 4; int nCol = 4; int N = 4;
  int nnz = 8;
  double* A; cudaMallocManaged(&A, nnz*sizeof(double));
  int *A_RowIndices; cudaMallocManaged(&A_RowIndices, (nRow+1)*sizeof(int)); 
  int *A_ColIndices; cudaMallocManaged(&A_ColIndices, nnz*sizeof(int));
  A_RowIndices[0] = 0;
  A_RowIndices[1] = 3;
  A_RowIndices[2] = 5;
  A_RowIndices[3] = 7;
  A_RowIndices[4] = 8;
  
  A[0] = 1.0; A_ColIndices[0] = 0;
  A[1] = 4.0; A_ColIndices[1] = 1;
  A[2] = 5.0; A_ColIndices[2] = 2;
  A[3] = 4.0; A_ColIndices[3] = 0;
  A[4] = 2.0; A_ColIndices[4] = 1;
  A[5] = 5.0; A_ColIndices[5] = 0;
  A[6] = 1.0; A_ColIndices[6] = 2;
  A[7] = 8.0; A_ColIndices[7] = 3;

  double *F; cudaMallocManaged(&F, nRow*sizeof(double));
  F[0] = 100.0; F[1] = 200.0; F[2] = 400.0; F[3] = 500.0;

  double *x; cudaMallocManaged(&x, nRow*sizeof(double));

  // --- Descriptor for sparse matrix A
  cusparseMatDescr_t descrA;      (cusparseCreateMatDescr(&descrA));
  cusparseSetMatType      (descrA, CUSPARSE_MATRIX_TYPE_GENERAL);
  cusparseSetMatIndexBase (descrA, CUSPARSE_INDEX_BASE_ZERO);
  
  // --- CUDA solver initialization
  cusolverSpHandle_t solver_handle;
  cusolverSpCreate(&solver_handle);

  int rankA;
  int *p = (int *)malloc(N * sizeof(int));
  double min_norm;
  cusolverSpDcsrlsqvqrHost(solver_handle, N, N, nnz, descrA, A, A_RowIndices, A_ColIndices, F, 0.000001, &rankA, x, p, &min_norm);
  printf("Showing the results...\n");
  for (int i = 0; i < N; i++) printf("%f\n", x[i]);
  for (int i = 0; i < N; i++) printf("%f\n", F[i]);
  for (int i = 0; i < nnz; i++) printf("%f\n", A[i]);
}
